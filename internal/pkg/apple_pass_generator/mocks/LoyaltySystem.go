// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// LoyaltySystem is an autogenerated mock type for the LoyaltySystem type
type LoyaltySystem struct {
	mock.Mock
}

// CreatingCustomer provides a mock function with given fields: loyaltyInfo
func (_m *LoyaltySystem) CreatingCustomer(loyaltyInfo string) (string, string, error) {
	ret := _m.Called(loyaltyInfo)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(loyaltyInfo)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(loyaltyInfo)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(loyaltyInfo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SettingPoints provides a mock function with given fields: loyaltyInfo, dbPoints, reqPoints
func (_m *LoyaltySystem) SettingPoints(loyaltyInfo string, dbPoints string, reqPoints string) (string, error) {
	ret := _m.Called(loyaltyInfo, dbPoints, reqPoints)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(loyaltyInfo, dbPoints, reqPoints)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(loyaltyInfo, dbPoints, reqPoints)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatingPass provides a mock function with given fields: reqLoyaltyInfo, dbLoyaltyInfo
func (_m *LoyaltySystem) UpdatingPass(reqLoyaltyInfo string, dbLoyaltyInfo string) (string, error) {
	ret := _m.Called(reqLoyaltyInfo, dbLoyaltyInfo)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(reqLoyaltyInfo, dbLoyaltyInfo)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(reqLoyaltyInfo, dbLoyaltyInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
