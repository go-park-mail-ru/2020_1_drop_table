// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// GetPoints provides a mock function with given fields: ctx, uuid
func (_m *Usecase) GetPoints(ctx context.Context, uuid string) (int, error) {
	ret := _m.Called(ctx, uuid)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSale provides a mock function with given fields: ctx, sum, uuid
func (_m *Usecase) GetSale(ctx context.Context, sum float32, uuid string) (float32, error) {
	ret := _m.Called(ctx, sum, uuid)

	var r0 float32
	if rf, ok := ret.Get(0).(func(context.Context, float32, string) float32); ok {
		r0 = rf(ctx, sum, uuid)
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, float32, string) error); ok {
		r1 = rf(ctx, sum, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPoints provides a mock function with given fields: ctx, uuid, points
func (_m *Usecase) SetPoints(ctx context.Context, uuid string, points int) error {
	ret := _m.Called(ctx, uuid, points)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, uuid, points)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
