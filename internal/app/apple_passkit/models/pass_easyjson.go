// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF3b256a3Decode20201DropTableInternalAppApplePasskitModels(in *jlexer.Lexer, out *UpdateResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "URL":
			out.URL = string(in.String())
		case "QR":
			out.QR = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF3b256a3Encode20201DropTableInternalAppApplePasskitModels(out *jwriter.Writer, in UpdateResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"URL\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"QR\":"
		out.RawString(prefix)
		out.String(string(in.QR))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF3b256a3Encode20201DropTableInternalAppApplePasskitModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF3b256a3Encode20201DropTableInternalAppApplePasskitModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF3b256a3Decode20201DropTableInternalAppApplePasskitModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF3b256a3Decode20201DropTableInternalAppApplePasskitModels(l, v)
}
func easyjsonF3b256a3Decode20201DropTableInternalAppApplePasskitModels1(in *jlexer.Lexer, out *ApplePassMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CafeID":
			out.CafeID = int(in.Int())
		case "Meta":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Meta = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Meta)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF3b256a3Encode20201DropTableInternalAppApplePasskitModels1(out *jwriter.Writer, in ApplePassMeta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CafeID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CafeID))
	}
	{
		const prefix string = ",\"Meta\":"
		out.RawString(prefix)
		if in.Meta == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Meta {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApplePassMeta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF3b256a3Encode20201DropTableInternalAppApplePasskitModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApplePassMeta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF3b256a3Encode20201DropTableInternalAppApplePasskitModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApplePassMeta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF3b256a3Decode20201DropTableInternalAppApplePasskitModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApplePassMeta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF3b256a3Decode20201DropTableInternalAppApplePasskitModels1(l, v)
}
func easyjsonF3b256a3Decode20201DropTableInternalAppApplePasskitModels2(in *jlexer.Lexer, out *ApplePassDB) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cafe_id":
			out.CafeID = int(in.Int())
		case "type":
			out.Type = string(in.String())
		case "loyalty_info":
			out.LoyaltyInfo = string(in.String())
		case "published":
			out.Published = bool(in.Bool())
		case "design":
			out.Design = string(in.String())
		case "icon":
			if in.IsNull() {
				in.Skip()
				out.Icon = nil
			} else {
				out.Icon = in.Bytes()
			}
		case "icon2x":
			if in.IsNull() {
				in.Skip()
				out.Icon2x = nil
			} else {
				out.Icon2x = in.Bytes()
			}
		case "logo":
			if in.IsNull() {
				in.Skip()
				out.Logo = nil
			} else {
				out.Logo = in.Bytes()
			}
		case "logo2x":
			if in.IsNull() {
				in.Skip()
				out.Logo2x = nil
			} else {
				out.Logo2x = in.Bytes()
			}
		case "strip":
			if in.IsNull() {
				in.Skip()
				out.Strip = nil
			} else {
				out.Strip = in.Bytes()
			}
		case "strip2x":
			if in.IsNull() {
				in.Skip()
				out.Strip2x = nil
			} else {
				out.Strip2x = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF3b256a3Encode20201DropTableInternalAppApplePasskitModels2(out *jwriter.Writer, in ApplePassDB) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cafe_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CafeID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"loyalty_info\":"
		out.RawString(prefix)
		out.String(string(in.LoyaltyInfo))
	}
	{
		const prefix string = ",\"published\":"
		out.RawString(prefix)
		out.Bool(bool(in.Published))
	}
	{
		const prefix string = ",\"design\":"
		out.RawString(prefix)
		out.String(string(in.Design))
	}
	{
		const prefix string = ",\"icon\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Icon)
	}
	{
		const prefix string = ",\"icon2x\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Icon2x)
	}
	{
		const prefix string = ",\"logo\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Logo)
	}
	{
		const prefix string = ",\"logo2x\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Logo2x)
	}
	{
		const prefix string = ",\"strip\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Strip)
	}
	{
		const prefix string = ",\"strip2x\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Strip2x)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApplePassDB) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF3b256a3Encode20201DropTableInternalAppApplePasskitModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApplePassDB) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF3b256a3Encode20201DropTableInternalAppApplePasskitModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApplePassDB) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF3b256a3Decode20201DropTableInternalAppApplePasskitModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApplePassDB) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF3b256a3Decode20201DropTableInternalAppApplePasskitModels2(l, v)
}
