// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	bytes "bytes"
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "2020_1_drop_table/internal/app/apple_passkit/models"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// GeneratePassObject provides a mock function with given fields: c, cafeID, published
func (_m *Usecase) GeneratePassObject(c context.Context, cafeID int, published bool) (*bytes.Buffer, error) {
	ret := _m.Called(c, cafeID, published)

	var r0 *bytes.Buffer
	if rf, ok := ret.Get(0).(func(context.Context, int, bool) *bytes.Buffer); ok {
		r0 = rf(c, cafeID, published)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, bool) error); ok {
		r1 = rf(c, cafeID, published)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImage provides a mock function with given fields: c, imageName, cafeID, published
func (_m *Usecase) GetImage(c context.Context, imageName string, cafeID int, published bool) ([]byte, error) {
	ret := _m.Called(c, imageName, cafeID, published)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, int, bool) []byte); ok {
		r0 = rf(c, imageName, cafeID, published)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, bool) error); ok {
		r1 = rf(c, imageName, cafeID, published)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPass provides a mock function with given fields: c, cafeID, published
func (_m *Usecase) GetPass(c context.Context, cafeID int, published bool) (map[string]string, error) {
	ret := _m.Called(c, cafeID, published)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context, int, bool) map[string]string); ok {
		r0 = rf(c, cafeID, published)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, bool) error); ok {
		r1 = rf(c, cafeID, published)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePass provides a mock function with given fields: c, pass, cafeID, publish
func (_m *Usecase) UpdatePass(c context.Context, pass models.ApplePassDB, cafeID int, publish bool) (models.UpdateResponse, error) {
	ret := _m.Called(c, pass, cafeID, publish)

	var r0 models.UpdateResponse
	if rf, ok := ret.Get(0).(func(context.Context, models.ApplePassDB, int, bool) models.UpdateResponse); ok {
		r0 = rf(c, pass, cafeID, publish)
	} else {
		r0 = ret.Get(0).(models.UpdateResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.ApplePassDB, int, bool) error); ok {
		r1 = rf(c, pass, cafeID, publish)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
