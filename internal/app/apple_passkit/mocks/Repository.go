// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "2020_1_drop_table/internal/app/apple_passkit/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, ap
func (_m *Repository) Add(ctx context.Context, ap models.ApplePassDB) (models.ApplePassDB, error) {
	ret := _m.Called(ctx, ap)

	var r0 models.ApplePassDB
	if rf, ok := ret.Get(0).(func(context.Context, models.ApplePassDB) models.ApplePassDB); ok {
		r0 = rf(ctx, ap)
	} else {
		r0 = ret.Get(0).(models.ApplePassDB)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.ApplePassDB) error); ok {
		r1 = rf(ctx, ap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMeta provides a mock function with given fields: ctx, cafeID
func (_m *Repository) GetMeta(ctx context.Context, cafeID int) (models.ApplePassMeta, error) {
	ret := _m.Called(ctx, cafeID)

	var r0 models.ApplePassMeta
	if rf, ok := ret.Get(0).(func(context.Context, int) models.ApplePassMeta); ok {
		r0 = rf(ctx, cafeID)
	} else {
		r0 = ret.Get(0).(models.ApplePassMeta)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, cafeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPassByCafeID provides a mock function with given fields: ctx, cafeID, Type, published
func (_m *Repository) GetPassByCafeID(ctx context.Context, cafeID int, Type string, published bool) (models.ApplePassDB, error) {
	ret := _m.Called(ctx, cafeID, Type, published)

	var r0 models.ApplePassDB
	if rf, ok := ret.Get(0).(func(context.Context, int, string, bool) models.ApplePassDB); ok {
		r0 = rf(ctx, cafeID, Type, published)
	} else {
		r0 = ret.Get(0).(models.ApplePassDB)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string, bool) error); ok {
		r1 = rf(ctx, cafeID, Type, published)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPassByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetPassByID(ctx context.Context, id int) (models.ApplePassDB, error) {
	ret := _m.Called(ctx, id)

	var r0 models.ApplePassDB
	if rf, ok := ret.Get(0).(func(context.Context, int) models.ApplePassDB); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.ApplePassDB)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, newApplePass
func (_m *Repository) Update(ctx context.Context, newApplePass models.ApplePassDB) error {
	ret := _m.Called(ctx, newApplePass)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ApplePassDB) error); ok {
		r0 = rf(ctx, newApplePass)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDesign provides a mock function with given fields: ctx, Design, id
func (_m *Repository) UpdateDesign(ctx context.Context, Design string, id int) error {
	ret := _m.Called(ctx, Design, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, Design, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMeta provides a mock function with given fields: ctx, cafeID, meta
func (_m *Repository) UpdateMeta(ctx context.Context, cafeID int, meta []byte) error {
	ret := _m.Called(ctx, cafeID, meta)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []byte) error); ok {
		r0 = rf(ctx, cafeID, meta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
