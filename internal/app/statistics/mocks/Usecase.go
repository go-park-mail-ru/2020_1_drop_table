// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "2020_1_drop_table/internal/app/statistics/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// AddData provides a mock function with given fields: jsonData, _a1, clientUUID, staffId, cafeId
func (_m *Usecase) AddData(jsonData string, _a1 time.Time, clientUUID string, staffId int, cafeId int) error {
	ret := _m.Called(jsonData, _a1, clientUUID, staffId, cafeId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Time, string, int, int) error); ok {
		r0 = rf(jsonData, _a1, clientUUID, staffId, cafeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDataForGraphs provides a mock function with given fields: ctx, typ, since, to
func (_m *Usecase) GetDataForGraphs(ctx context.Context, typ string, since string, to string) (map[string]map[string][]models.TempStruct, error) {
	ret := _m.Called(ctx, typ, since, to)

	var r0 map[string]map[string][]models.TempStruct
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) map[string]map[string][]models.TempStruct); ok {
		r0 = rf(ctx, typ, since, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string][]models.TempStruct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, typ, since, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkerData provides a mock function with given fields: ctx, staffID, limit, since
func (_m *Usecase) GetWorkerData(ctx context.Context, staffID int, limit int, since int) ([]models.StatisticsStruct, error) {
	ret := _m.Called(ctx, staffID, limit, since)

	var r0 []models.StatisticsStruct
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) []models.StatisticsStruct); ok {
		r0 = rf(ctx, staffID, limit, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.StatisticsStruct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = rf(ctx, staffID, limit, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
