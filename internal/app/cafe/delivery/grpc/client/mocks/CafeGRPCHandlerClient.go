// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	cafe "2020_1_drop_table/internal/app/cafe/delivery/grpc/protobuff"
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// CafeGRPCHandlerClient is an autogenerated mock type for the CafeGRPCHandlerClient type
type CafeGRPCHandlerClient struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, in, opts
func (_m *CafeGRPCHandlerClient) GetByID(ctx context.Context, in *cafe.ID, opts ...grpc.CallOption) (*cafe.Cafe, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cafe.Cafe
	if rf, ok := ret.Get(0).(func(context.Context, *cafe.ID, ...grpc.CallOption) *cafe.Cafe); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cafe.Cafe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cafe.ID, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOwnerID provides a mock function with given fields: ctx, in, opts
func (_m *CafeGRPCHandlerClient) GetByOwnerID(ctx context.Context, in *cafe.ID, opts ...grpc.CallOption) (*cafe.ListCafe, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cafe.ListCafe
	if rf, ok := ret.Get(0).(func(context.Context, *cafe.ID, ...grpc.CallOption) *cafe.ListCafe); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cafe.ListCafe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cafe.ID, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
