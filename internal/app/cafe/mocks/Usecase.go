// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "2020_1_drop_table/internal/app/cafe/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Add provides a mock function with given fields: c, newCafe
func (_m *Usecase) Add(c context.Context, newCafe models.Cafe) (models.Cafe, error) {
	ret := _m.Called(c, newCafe)

	var r0 models.Cafe
	if rf, ok := ret.Get(0).(func(context.Context, models.Cafe) models.Cafe); ok {
		r0 = rf(c, newCafe)
	} else {
		r0 = ret.Get(0).(models.Cafe)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Cafe) error); ok {
		r1 = rf(c, newCafe)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCafes provides a mock function with given fields: ctx, since, limit, search
func (_m *Usecase) GetAllCafes(ctx context.Context, since int, limit int, search string) ([]models.Cafe, error) {
	ret := _m.Called(ctx, since, limit, search)

	var r0 []models.Cafe
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) []models.Cafe); ok {
		r0 = rf(ctx, since, limit, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Cafe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, string) error); ok {
		r1 = rf(ctx, since, limit, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: c, id
func (_m *Usecase) GetByID(c context.Context, id int) (models.Cafe, error) {
	ret := _m.Called(c, id)

	var r0 models.Cafe
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Cafe); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Get(0).(models.Cafe)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDWithPassInfo provides a mock function with given fields: ctx, id, typ
func (_m *Usecase) GetByIDWithPassInfo(ctx context.Context, id int, typ string) (models.CafeWithPassInfo, error) {
	ret := _m.Called(ctx, id, typ)

	var r0 models.CafeWithPassInfo
	if rf, ok := ret.Get(0).(func(context.Context, int, string) models.CafeWithPassInfo); ok {
		r0 = rf(ctx, id, typ)
	} else {
		r0 = ret.Get(0).(models.CafeWithPassInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, id, typ)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOwnerID provides a mock function with given fields: c
func (_m *Usecase) GetByOwnerID(c context.Context) ([]models.Cafe, error) {
	ret := _m.Called(c)

	var r0 []models.Cafe
	if rf, ok := ret.Get(0).(func(context.Context) []models.Cafe); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Cafe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOwnerIDWithOwnerID provides a mock function with given fields: ctx, ownerID
func (_m *Usecase) GetByOwnerIDWithOwnerID(ctx context.Context, ownerID int) ([]models.Cafe, error) {
	ret := _m.Called(ctx, ownerID)

	var r0 []models.Cafe
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Cafe); ok {
		r0 = rf(ctx, ownerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Cafe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCafeSortedByRadius provides a mock function with given fields: ctx, latitude, longitude, radius
func (_m *Usecase) GetCafeSortedByRadius(ctx context.Context, latitude string, longitude string, radius string) ([]models.Cafe, error) {
	ret := _m.Called(ctx, latitude, longitude, radius)

	var r0 []models.Cafe
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []models.Cafe); ok {
		r0 = rf(ctx, latitude, longitude, radius)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Cafe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, latitude, longitude, radius)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: c, newCafe
func (_m *Usecase) Update(c context.Context, newCafe models.Cafe) (models.Cafe, error) {
	ret := _m.Called(c, newCafe)

	var r0 models.Cafe
	if rf, ok := ret.Get(0).(func(context.Context, models.Cafe) models.Cafe); ok {
		r0 = rf(c, newCafe)
	} else {
		r0 = ret.Get(0).(models.Cafe)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Cafe) error); ok {
		r1 = rf(c, newCafe)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
