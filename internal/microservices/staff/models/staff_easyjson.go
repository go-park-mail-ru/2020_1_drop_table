// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA0c9e1e4Decode20201DropTableInternalMicroservicesStaffModels(in *jlexer.Lexer, out *Staff) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.StaffID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "editedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EditedAt).UnmarshalJSON(data))
			}
		case "photo":
			out.Photo = string(in.String())
		case "isOwner":
			out.IsOwner = bool(in.Bool())
		case "CafeId":
			out.CafeId = int(in.Int())
		case "Position":
			out.Position = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA0c9e1e4Encode20201DropTableInternalMicroservicesStaffModels(out *jwriter.Writer, in Staff) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.StaffID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"editedAt\":"
		out.RawString(prefix)
		out.Raw((in.EditedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"isOwner\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsOwner))
	}
	{
		const prefix string = ",\"CafeId\":"
		out.RawString(prefix)
		out.Int(int(in.CafeId))
	}
	{
		const prefix string = ",\"Position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Staff) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA0c9e1e4Encode20201DropTableInternalMicroservicesStaffModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Staff) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA0c9e1e4Encode20201DropTableInternalMicroservicesStaffModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Staff) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA0c9e1e4Decode20201DropTableInternalMicroservicesStaffModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Staff) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA0c9e1e4Decode20201DropTableInternalMicroservicesStaffModels(l, v)
}
func easyjsonA0c9e1e4Decode20201DropTableInternalMicroservicesStaffModels1(in *jlexer.Lexer, out *SafeStaff) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.StaffID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "editedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EditedAt).UnmarshalJSON(data))
			}
		case "photo":
			out.Photo = string(in.String())
		case "isOwner":
			out.IsOwner = bool(in.Bool())
		case "CafeId":
			out.CafeId = int(in.Int())
		case "Position":
			out.Position = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA0c9e1e4Encode20201DropTableInternalMicroservicesStaffModels1(out *jwriter.Writer, in SafeStaff) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.StaffID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"editedAt\":"
		out.RawString(prefix)
		out.Raw((in.EditedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"isOwner\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsOwner))
	}
	{
		const prefix string = ",\"CafeId\":"
		out.RawString(prefix)
		out.Int(int(in.CafeId))
	}
	{
		const prefix string = ",\"Position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SafeStaff) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA0c9e1e4Encode20201DropTableInternalMicroservicesStaffModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SafeStaff) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA0c9e1e4Encode20201DropTableInternalMicroservicesStaffModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SafeStaff) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA0c9e1e4Decode20201DropTableInternalMicroservicesStaffModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SafeStaff) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA0c9e1e4Decode20201DropTableInternalMicroservicesStaffModels1(l, v)
}
